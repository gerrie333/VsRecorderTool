using System;

public class TextParser
{
    //Converts text byte data into readable text.
    //Gen 4 uses proprietary character encoding (not that complex)
    //Gen 5 uses UTF-16 character encoding
    public static string TextConverter(byte[] TextData)
    {
        ushort CurrentChar;
        string OutputString = "";
        string[] ConversionTable =
        {
            /*0x1-0x8*/     "　", "ぁ", "あ", "ぃ", "い", "ぅ", "う", "ぇ", 
            /*0x9-0x10*/    "え", "ぉ", "お", "か", "が", "き", "ぎ", "く", 
            /*0x11-0x18*/   "ぐ", "け", "げ", "こ", "ご", "さ", "ざ", "し", 
            /*0x19-0x20*/   "じ", "す", "ず", "せ", "ぜ", "そ", "ぞ", "た", 
            /*0x21-0x28*/   "だ", "ち", "ぢ", "っ", "つ", "づ", "て", "で", 
            /*0x29-0x30*/   "と", "ど", "な", "に", "ぬ", "ね", "の", "は", 
            /*0x31-0x38*/   "ば", "ぱ", "ひ", "び", "ぴ", "ふ", "ぶ", "ぷ", 
            /*0x39-0x40*/   "へ", "べ", "ぺ", "ほ", "ぼ", "ぽ", "ま", "み", 
            /*0x41-0x48*/   "む", "め", "も", "ゃ", "や", "ゅ", "ゆ", "ょ", 
            /*0x49-0x50*/   "よ", "ら", "り", "る", "れ", "ろ", "わ", "を", 
            /*0x51-0x58*/   "ん", "ァ", "ア", "ィ", "イ", "ゥ", "ウ", "ェ", 
            /*0x59-0x60*/   "エ", "ォ", "オ", "カ", "ガ", "キ", "ギ", "ク", 
            /*0x61-0x68*/   "グ", "ケ", "ゲ", "コ", "ゴ", "サ", "ザ", "シ", 
            /*0x69-0x70*/   "ジ", "ス", "ズ", "セ", "ゼ", "ソ", "ゾ", "タ", 
            /*0x71-0x78*/   "ダ", "チ", "ヂ", "ッ", "ツ", "ヅ", "テ", "デ", 
            /*0x79-0x80*/   "ト", "ド", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", 
            /*0x81-0x88*/   "バ", "パ", "ヒ", "ビ", "ピ", "フ", "ブ", "プ", 
            /*0x89-0x90*/   "ヘ", "ベ", "ペ", "ホ", "ボ", "ポ", "マ", "ミ", 
            /*0x91-0x98*/   "ム", "メ", "モ", "ャ", "ヤ", "ュ", "ユ", "ョ", 
            /*0x99-0xA1*/   "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ヮ", "ヲ", "ン", 

            /*0xA2-0xAB*/   "０", "１", "２", "３", "４", "５", "６", "７", "８", "９", 
            /*0xAC-0xC5*/   "Ａ", "Ｂ", "Ｃ", "Ｄ", "Ｅ", "Ｆ", "Ｇ", "Ｈ", "Ｉ", "Ｊ", "Ｋ", "Ｌ", "Ｍ", "Ｎ", "Ｏ", "Ｐ", "Ｑ", "Ｒ", "Ｓ", "Ｔ", "Ｕ", "Ｖ", "Ｗ", "Ｘ", "Ｙ", "Ｚ", 
            /*0xC6-0xDF*/   "ａ", "ｂ", "ｃ", "ｄ", "ｅ", "ｆ", "ｇ", "ｈ", "ｉ", "ｊ", "ｋ", "ｌ", "ｍ", "ｎ", "ｏ", "ｐ", "ｑ", "ｒ", "ｓ", "ｔ", "ｕ", "ｖ", "ｗ", "ｘ", "ｙ", "ｚ",

            /*0xE0-0xF9*/   " ", "！", "？", " ", "。", "...", ".", "/", "「", "」", "『", "』", "(", ")", "♂", "♀", "＋", "ー", "×", "÷", "＝", "～", "：", "；", "．", "，",
            /*0xFA-0x10E*/  "♠", "♣", "♥", "♦", "★", " ", " ", " ", " ", " ", "＠", "♪", "％", " ", " ", " ", " ", ":)", ":D", "D:", ">:(",
            /*0x10F-0x120*/ " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "←", "↑", "↓", "→", "▶", "&",

            /*0x121-0x12A*/ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
            /*0x12B-0x144*/ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            /*0x145-0x15E*/ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",

            /*0x15F-0x17E*/ "À", "Á", "Â", "Ã", "Ä", "Å", "Æ", "Ç", "È", "É", "Ê", "Ë", "Ì", "Í", "Î", "Ï", "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "×", "Ø", "Ù", "Ú", "Û", "Ü", "Ý", "Þ", "ß",
            /*0x17F-0x19E*/ "à", "á", "â", "ã", "ä", "å", "æ", "ç", "è", "é", "ê", "ë", "ì", "í", "î", "ï", "ð", "ñ", "ò", "ó", "ô", "õ", "ö", "÷", "ø", "ù", "ú", "û", "ü", "ý", "þ", "ÿ",

            /*0x19F-0x1A8*/ " ", " ", " ", " ", " ", " ", " ", " ", " ", " ",
            /*0x1A9-0x1C5*/ "¡", "¿", "!", "?", ",", ".", "...", "·", "/", "‘", "’", " ", " ", " ", "«", "»", "(", ")", "♂", "♀", "+", "-", "*", "#", "=", "&", "~", ":", ";",
            /*0x1C6-0x1DA*/ "♠", "♣", "♥", "♦", "★", " ", " ", " ", " ", " ", "@", "♪", "%", " ", " ", " ", " ", ":)", ":D", "D:", ">:(",
            /*0x1DB-0x1EC*/ " ", " ", " ", " ", " ", "PK", "MN", " ", " ", " ", " ", " ", " ", "°", "_", " ", " ", " "
        };

        for (int Counter = 0; Counter < TextData.Length >> 1; Counter++)
        {
            CurrentChar = BitConverter.ToUInt16(TextData, 2 * Counter);

            if (CurrentChar == 0xFFFF) { break; }
            if (CurrentChar == 0) { OutputString += "?"; continue; }

            if ((Functions.CurrentGame == Game.Platinum) || (Functions.CurrentGame == Game.HeartgoldSoulsilver))
            {
                if (CurrentChar > ConversionTable.Length)
                {
                    OutputString += "?";
                }
                else
                {
                    OutputString += ConversionTable[CurrentChar - 1];
                }
 
                continue; 
            }

            OutputString += BitConverter.ToChar(TextData, 2 * Counter);    
        }

        return OutputString;
    }
}
