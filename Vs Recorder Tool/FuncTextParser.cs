using System;

public class TextParser
{
    //Expand Tables
    //Converts byte data into readable text.
    public static string TextConverter(byte[] TextData)
    {
        string OutputString = "";
        uint FirstCharID = 0xE1;
        string[] ConversionTable =
        {
            //7 bazillion japanese characters what the fuck
            /*"　", "ぁ", "あ", "ぃ", "い", "ぅ", "う", "ぇ", "え", "ぉ", "お", "か", "が", "き", "ぎ", "く", "ぐ", "け", "げ", "こ", "ご", "さ", "ざ", "し", "じ", "す", "ず",
            "せ", "ぜ", "そ", "ぞ", "た", "だ", "ち", "ぢ", "っ", "つ", "づ", "て", "で", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", "ぜ", hey babe hu*/
            "！", "？", " ", "。", "...", ".", "/", " ", " ", " ", " ", "(", ")", "♂", "♀", "+", "-", "×", "÷", "=", "~", ":", ";", ".", ",",
            "♠", "♣", "♥", "♦", "★", " ", " ", " ", " ", " ", "@", "♪", "%", " ", " ", " ", " ", ":)", ":D", "D:", ">:(",
            " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "←", "↑", "↓", "→", "▶", "&",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "À", "Á", "Â", "Ã", "Ä", "Å", "Æ", "Ç", "È", "É", "Ê", "Ë", "Ì", "Í", "Î", "Ï", "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "×", "Ø", "Ù", "Ú", "Û", "Ü", "Ý", "Þ", "ß",
            "à", "á", "â", "ã", "ä", "å", "æ", "ç", "è", "é", "ê", "ë", "ì", "í", "î", "ï", "ð", "ñ", "ò", "ó", "ô", "õ", "ö", "÷", "ø", "ù", "ú", "û", "ü", "ý", "þ", "ÿ",
            " ", " ", " ", " ", " ", " ", " ", " ", " ", " ",
            "¡", "¿", "!", "?", ",", ".", "...", "·", "/", "‘", "’", " ", " ", " ", "«", "»", "(", ")", "♂", "♀", "+", "-", "*", "#", "=", "&", "~", ":", ";",
            "♠", "♣", "♥", "♦", "★", " ", " ", " ", " ", " ", "@", "♪", "%", " ", " ", " ", " ", ":)", ":D", "D:", ">:(",
            " ", " ", " ", " ", " ", "PK", "MN", " ", " ", " ", " ", " ", " ", "°", "_", " ", " ", " "
        };


        if (Functions.Gen5Mode == true)
        {
            ConversionTable = new string[]
            {
                " ", "!", " ", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/",
                "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
                ":", ";", "<", "=", ">", "?", "@",
                "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
                "[", "'\'", "]", "^", "_", "`",
                "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
                "{", "|", "}", "~",
                " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ",
                "¡", " ", " ", " ", " ", " ", "§", "¨", " ", "ª", "«", " ", " ", " ", " ", " ", "°", "±", " ", " ", " ", "´", " ", "¶", " ", " ", " ", " ", "º", "»", " ", " ", " ", "¿",
                "À", "Á", "Â", "Ã", "Ä", "Å", "Æ", "Ç", "È", "É", "Ê", "Ë", "Ì", "Í", "Î", "Ï", "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "×", "Ø", "Ù", "Ú", "Û", "Ü", "Ý", "Þ", "ß",
                "à", "á", "â", "ã", "ä", "å", "æ", "ç", "è", "é", "ê", "ë", "ì", "í", "î", "ï", "ð", "ñ", "ò", "ó", "ô", "õ", "ö", "÷", "ø", "ù", "ú", "û", "ü", "ý", "þ", "ÿ",
            };

            FirstCharID = 0x20;
        }


        for (int Counter = 0; Counter < TextData.Length - 2; Counter += 2)
        {
            if (BitConverter.ToUInt16(TextData, Counter) == 0xFFFF) { break; }
            if ((BitConverter.ToUInt16(TextData, Counter) - FirstCharID) >= ConversionTable.Length) { OutputString += "🤡L"; continue; }

            OutputString += ConversionTable[BitConverter.ToUInt16(TextData, Counter) - FirstCharID];
        }


        return OutputString;
        return OutputString;
    }
}
